#-*- coding: utf-8 -*-

import sys, traceback
import pandas as pd
pd.set_option('display.width', 1000)
pd.options.mode.chained_assignment = None
import numpy as np
import redis, re, ast 
from .entities import *

class ExecutionStructure(object):
    def __init__(self, config, redisdb, logger):
        self.logger = logger
        self.config = config
        self.redisdb = redisdb

        # Make entities dataframe
        path = self.config['entities_config']['csv_path'] + '/'
        csv_file = path + self.config['entities_config']['csv_entities_file']
        self.entities = pd.read_csv(csv_file)

        csv_file = path + self.config['entities_config']['parse_label_file']
        self.parse_label = pd.read_csv(csv_file)

        csv_file = path + self.config['entities_config']['domain_exp_file']
        self.domain_exp = pd.read_csv(csv_file).fillna("")

        csv_file = path + self.config['entities_config']['verify_dict_file']
        self.verify_dict = pd.read_csv(csv_file).fillna("")

        setattr(entity, 'entity_dict', self.entities)
        
    def analyze_pos(self, analyzer):
        for index, row in self.pt_df.iterrows():
            if row['pos'] == "UNKNOWN":
                try:
                    child_text = self.pt_df[(self.pt_df['head_token_idx'] == index) & \
                                                (self.pt_df['token_idx'] != index)]['text'].tolist().pop()
                except IndexError:
                    traceback.print_exc()
                    child_text = ""

                text = self.pt_df[self.pt_df['token_idx'] == index]['text'].tolist().pop()
                word = text + child_text

                response = analyzer.call(word).decode('utf-8')
                token = response.split('|')[0]
                token_pos = token.split('/')[2]
                self.pt_df.a_pos[self.pt_df.token_idx == index] = token_pos
            else:
                self.pt_df.a_pos[self.pt_df.token_idx == index] = row['pos']

    def dependency_label_rule(self, entity, my_label, parent_label, brothers_label, depth, parent_es_kind):
        labels_set = set([my_label] + brothers_label)
        print("labels_set, my_label, parent_es_kind:", labels_set, my_label, parent_es_kind)

        time_entity = False
        meaning =  entity['meanings'].tolist()
        if len(meaning) > 0:
            if meaning[0].split(',')[0] in ['day']:
                time_entity = True

        es_kind = None

        es_action = set(['ROOT-VERB','ROOT-PRT','ROOT-ADJ','ADVCL-VERB','ROOT-ADJECTIVE','AUX-VERB','SUFF'])
        es_subject = set(['ROOT-NOUN','NSUBJ','AUX-NOUN','CCOMP','ADVCL-NOUN','DOBJ','NN'])
        es_modifier = set(['RCMOD','ADVMOD','ATTR'])
        es_object = set(['DOBJ','NN'])
        es_special = set(['NEG', 'NUM'])

        if depth <= 1:
            for key, labels in [('object',es_object), ('action', es_action), ('subject',es_subject), ('modifier',es_modifier), ('special',es_special)]:
                s = labels_set.intersection(labels)
                print("S:",s)
                if my_label in s and key == 'modifier':
                    if my_label == 'ATTR' and parent_es_kind == 'action':
                        es_kind = 'action'
                    else:
                        es_kind = key
                elif len(s) > 0 and my_label == s.pop():
                    es_kind = key
                    print("loop es kind:", key)
        else:
            print("dept else - my_label, parent_label, parent_es_kind:",my_label, parent_label, parent_es_kind)
            if my_label == "SUFF" and parent_es_kind == 'subject':
                es_kind = "subject_suff"
            elif my_label == "DEP" and parent_es_kind == 'object':
                es_kind = "object"
            elif my_label == "NN" and parent_es_kind == "object":
                es_kind = "object"
            elif my_label == "NN" and parent_es_kind == "subject":
                es_kind = "object"
            elif my_label in ["NN","DOBJ"] and parent_es_kind == "action":
                es_kind = "subject"
            elif my_label in es_special:
                es_kind = "special"

        print("key:",es_kind)
        return es_kind

    def get_es_kind(self, token, parent_label, brothers_label, depth, parent_es_kind):
        print("------------------------ sub begin ---------------------------")
        label = token['label'].tolist().pop()
        word = token['text'].tolist().pop()
        pos = token['a_pos'].tolist().pop()
        e_key = word + "/" + pos
        print("e_key:",e_key)
        e = self.entities[self.entities['word'] == e_key]

        es_kind = self.dependency_label_rule(e, label, parent_label, brothers_label, depth, parent_es_kind)
        print("------------------------ sub end ---------------------------")

        es_kind_str = es_kind if es_kind else 'None'
        return_str = e_key + ":" + label + "/" + str(token['token_idx'].tolist().pop()) + ":" + es_kind_str
        return es_kind, return_str

    def merge_es_dict(self, es_kind, child_label, parse_dict, child_parse_dict):
        print("Start -------------------------------")
        print("merge_es_dict: parse_dict ->", parse_dict)
        print("merge_es_dict: child_parse_dict ->", child_parse_dict)
        for child_es_kind in child_parse_dict.keys():
            value = child_parse_dict[child_es_kind]
            print("++ value:", value)
            print("++ child_es_kind:", child_es_kind)
            if child_label.split('-')[0] in ['ADVCL','RCMOD','CCOMP']:
                if es_kind + '_modifier' not in parse_dict.keys():
                    parse_dict[es_kind + '_modifier'] = []
                parse_dict[es_kind + '_modifier'] += value
            elif child_es_kind in ['modifier']:
                if es_kind + '_modifier' not in parse_dict.keys():
                    parse_dict[es_kind + '_modifier'] = []
                parse_dict[es_kind + '_modifier'] += value
            elif child_es_kind in ['subject']:
                if child_es_kind  not in parse_dict.keys():
                    parse_dict[child_es_kind] = []
                parse_dict[child_es_kind] += value
            elif child_es_kind in ['special']:
                if child_label in ['NEG']:
                    if es_kind + '_neg' not in parse_dict.keys():
                        parse_dict[es_kind + '_neg'] = []
                    parse_dict[es_kind + '_neg'] += value
                elif child_label in ['NUM']:
                    if es_kind + '_num' not in parse_dict.keys():
                        parse_dict[es_kind + '_num'] = []
                    parse_dict[es_kind + '_num'] += value
            elif es_kind == 'object' and child_es_kind in ['object']:
                parse_dict[es_kind] += value
            else:
                parse_dict.update(child_parse_dict)
        print("merge_es_dict: parse_dict ->", parse_dict)
        print("End-------------------------------")

    def read_parse_tree(self, idx, parent_es_kind = None, brothers_label = [], depth = 0):

        token = self.pt_df[self.pt_df['token_idx'] == idx]
        label = token['label'].tolist().pop()
        pos = token['a_pos'].tolist().pop()

        depth = 0 if label.split('-')[0] in ['ROOT','ADVCL','RCMOD','CCOMP'] else depth + 1

        parse_dict = {}
        es_kind, e_key = self.get_es_kind(token, label, brothers_label, depth, parent_es_kind)
        print("es_kind:",es_kind)
        if es_kind:
            if es_kind == "modifier":
                if pos in ["NOUN"]:
                    es_kind = "subject"
                elif pos in ["VERB"]:
                    es_kind = "action"

            if es_kind not in parse_dict.keys():
                parse_dict[es_kind] = []
            parse_dict[es_kind].append(e_key)

            print("es_kind, es_kye:",es_kind, e_key)

            child_idxs = self.pt_df[(self.pt_df['head_token_idx'] == idx) & (self.pt_df['token_idx'] != idx)]['token_idx'].tolist()
            child_labels = self.pt_df[(self.pt_df['head_token_idx'] == idx) & (self.pt_df['token_idx'] != idx)]['label'].tolist()
            childs = zip(child_idxs, child_labels)

            print("self_idx:",idx)
            print("child_idxs:",child_idxs)
            for idx, child_label in childs:
                child_parse_dict = self.read_parse_tree(idx, es_kind, child_labels, depth)
                soa_cnt = len(set([key.split('_')[0] for key in child_parse_dict.keys()]))
                print("Child parse dict(depth:%s,soa_cnt:%s):%s"%(depth,soa_cnt,child_parse_dict))
                if soa_cnt > 1 and depth > 0:
                    if es_kind + '_modifier' not in parse_dict.keys():
                        parse_dict[es_kind + '_modifier'] = []
                    parse_dict[es_kind + '_modifier'].append(child_parse_dict)
                else:
                    self.merge_es_dict(es_kind, child_label, parse_dict, child_parse_dict)

            print("(L)Merge parse dict:",parse_dict)
        return parse_dict

    def make_execution_structure(self, df, analyzer):
        self.pt_df = df
        self.pt_df['a_pos'] = pd.Series(index=self.pt_df.index)
        self.pt_df['exec_pos'] = pd.Series(index=self.pt_df.index)
        self.pt_df.to_csv('parse_tree.csv', index=False)

        self.analyze_pos(analyzer)

        root_idx = self.pt_df.loc[self.pt_df['label'] == 'ROOT']['token_idx'].tolist().pop()

        df = self.pt_df.loc[self.pt_df['label'].isin(['ROOT','ADVCL','AUX'])]
        tokens = zip(df['token_idx'].tolist(), df['label'].tolist(), df['a_pos'].tolist())

        for idx, label, pos in tokens:
            self.pt_df.label[self.pt_df.token_idx == idx] = label + '-' + pos.upper().strip()

        print("self.pt_df:\n",self.pt_df)
        parse_dict = self.read_parse_tree(root_idx)
        print("parse_dict:",parse_dict)

        return parse_dict

    """
    def verify_answer(self, exec_dict, context, sub_context):
        answer = exec_dict['action_entity'] + exec_dict['subject_entity']
        if answer == ['아니다']:
            r_value = False
        elif answer == ['맞다']:
            r_value = True
        elif sub_context == 'select-order':
            if es_how['origin'][0].strip() in ['2 번','1 번']:
                r_value = True
            else:
                r_value = False
        else:
            r_value = None
            pass

        return r_value

    def get_next_context(self, context, sub_context):
        next_context = ''
        if context == 'cancel-order':
            if sub_context == 'begin':
                next_context = 'select-order'
            elif sub_context == 'select-order':
                next_context = 'finish'
        elif context == 'refund':
            if sub_context == 'begin':
                next_context = 'select-order'
            elif sub_context == 'select-order':
                next_context = 'finish'

        return next_context
    """

    def verify_domain(self, domain_df, es_dict):
        p = re.compile('.*\+')
        for index, row in domain_df.iterrows():
            check_flag = True
            for key in ['subject','object','action']:
                items = row[key].split(',')
                for item in items:
                    if p.match(item) and (item[:-1] not in es_dict[key]):
                        check_flag = False

            if check_flag:
                return True, row

        return False, None

    def get_user_convo(self, user_id):
        name = "CONVO-" + user_id
        # Temporary
        #user_convo = self.redisdb.hgetall(name)
        user_convo = {}

        if user_convo == {}:
            user_convo = {
                'context' : None,
                'prev_sao' : {},
                'formatter' : None,
                'request' : None,
                'args' : {}
            }
        else:
            user_convo['prev_sao'] = ast.literal_eval(user_convo['prev_sao'])
            user_convo['args'] = ast.literal_eval(user_convo['args'])
            if user_convo['request'] == 'None':
                user_convo['request'] = None

        return user_convo

    def save_user_context(self, user_id, user_convo):
        name = "CONVO-" + user_id
        self.redisdb.hmset(name, user_convo)

    def get_meaning(self, ekey):
        print("ekey:",ekey)
        word = ekey.split(':')[0]
        print("word:",word,ekey)
        e = self.entities[self.entities['word'] == word]
        row, _ = e.shape
        if row == 1:
            meaning = e['meanings'].tolist().pop() + ':' + ekey.split(':')[1] + ':' + ekey.split(':')[2] + ':' + e['dependency'].tolist().pop()
        elif row == 0:
            meaning = 'not_found' + ':' + ekey.split(':')[1] + ':' + ekey.split(':')[2] + ':' + e['dependency'].tolist().pop()
        else:
            meaning = None

        return meaning

    def infer_meaning(self, es_type, p_meaning, values):
        meanings = []
        if type(values) == dict:
            for key, value in values.items():
                tmp = value.split(':')
                tmp[2] = key
                meaning = ':'.join(tmp)
                meanings.append(meaning)
        elif type(values) == list:
            meanings = values[:]
        else:
            meanings.append(values)

        dependency = p_meaning.split(':')[3]
        if dependency == "T":
            p_meaning = meanings[:]

        return p_meaning

    def reset_parse_dict(self, es_type, meanings):
        print("reset_parse_dict-----------[{},{}]".format(es_type, meanings))
        es_subject = set(['ROOT-NOUN','NSUBJ','AUX','CCOMP','ADVCL-NOUN','NN','RCMOD'])
        es_object = set(['ADVMOD'])

        actions = objects = main_meaning =  None
        if len(meanings) > 1:
            labels_set = []
            for meaning in meanings:
                if meaning:
                    print("meaning:",meaning)
                    temp = meaning.split(':')
                    print("temp, temp[1]:",temp, temp[1])
                    label, token_idx = temp[1].split('/')
                    labels_set.append(label)
            labels_set = set(labels_set)
            print("labels_set:",labels_set)

            if es_type == 'subject':
                s = labels_set.intersection(es_subject)
                print("S:",s)
                for meaning in meanings:
                    if meaning:
                        temp = meaning.split(':')
                        my_label, token_idx = temp[1].split('/')
                        if my_label in s and my_label == s.pop():
                            main_meaning = meaning
                        elif my_label in es_object:
                            token = self.pt_df[self.pt_df['token_idx'] == int(token_idx)]
                            token_str = token['text'].tolist().pop() + '/' + token['a_pos'].tolist().pop() + ':' + temp[1]
                            objects = [] if objects == None else objects
                            objects.append(token_str)
        else:
            main_meaning = meanings.pop()

        print("main_meaning, actions, objects:", main_meaning, actions, objects)
        print("reset_parse_dict-----------End.")
        return main_meaning, actions, objects

    def read_parse_dict(self, parse_dict, p_meaning=None):
        es_dict = {}
        print("1. parse_dict:",parse_dict)

        for es_type in ['subject', 'object', 'action']:
            try:
                sub_keys = []
                for key in parse_dict.keys():
                    if re.match(es_type + "_", key):
                        sub_keys.append(key)
                
                for value in parse_dict[es_type]:
                    p_meaning = self.get_meaning(value)

                for key in sub_keys:
                    if key.split('_')[1] == 'modifier':
                        if type(parse_dict[key]) == dict:
                            values = self.read_parse_dict(parse_dict[key], p_meaning)
                        else:
                            values = parse_dict[key]
                        meanings = self.infer_meaning(es_type, p_meaning, values)

            except KeyError as e:
                traceback.print_exc()

            es_dict[es_type] = meanings
            print("es_dict(loop):",es_dict)

        return es_dict

        """
        for es_type in ['subject', 'object', 'action']:
            try:
                meanings = []
                for value in parse_dict[es_type]:
                    if type(value) == dict:
                        child_es_dict = self.read_parse_dict(value)
                        print("child_main_es_dict:",child_es_dict)
                        meanings.append("child_es_dict")
                    else:
                        meanings.append(self.get_meaning(value))

                main_meaning, actions, objects = self.reset_parse_dict(es_type, meanings)
                if actions:
                    parse_dict['action'] = parse_dict['action'] + actions if 'action' in parse_dict.keys() else actions
                elif objects:
                    parse_dict['object'] = parse_dict['object'] + objects if 'object' in parse_dict.keys() else objects
                print("loop parse dict:",parse_dict)

                for meaning in meanings:
                    print("all meaning:",meaning)

                for key in parse_dict.keys():
                    if key.startswith(es_type + "_"):
                        for value in parse_dict[key]:
                            if type(value) == dict:
                                child_es_dict = self.read_parse_dict(value)
                                meaning = child_es_dict
                                #meaning, context = self.infer_meaning(key, child_es_dict)
                                #meaning = ['cancelNOUN:RCMOD/1:modifier',"order:NN/0:subject"]
                                #main_meaning = ['cancelNOUN:RCMOD/1:modifier',"order:NN/0:subject"]
                                print("meaning:{}, value:{}, child_es_dict:{}".format(meaning, value, child_es_dict))
                            else:
                                meaning = self.get_meaning(value)
                                print("A:A:A:A: value:{}, meaning:{}".format(value, meaning))
                            print("meaning:{} modifier:{} value:{}".format(meaning,key,value))

                            
                            #_, sub_key = key.split("_")
                            #print("es_type, sub_key, main_meaning, meaning:", es_type, sub_key, main_meaning, meaning)
                            #if sub_key == 'neg':
                            #    es_dict[es_type + "_neg"] = meaning
                            #elif sub_key == 'modifier':
                            #    modifier_es_type = meaning.split(':')[2]
                            #    print("Modifier es type:", modifier_es_type)
                            #    if main_meaning == None:
                            #        main_meaning = meaning
                            #    elif modifier_es_type not in es_dict.keys() or es_dict[modifier_es_type] == None:
                            #        es_dict[modifier_es_type] = meaning
                            #        print("Change es dict:", es_dict)
                            

            except KeyError as e:
                traceback.print_exc()
                main_meaning = None

            es_dict[es_type] = main_meaning
            print("es_dict(loop):",es_dict)

        return es_dict
        """

    def read_intent(self, parse_dict, user_id):
        self.parse_dict = parse_dict
        self.user_id = user_id

        print("self.parse_dict:\n",self.parse_dict)
        print("self.pt_df:\n",self.pt_df)

        #    user_convo = {
        #        'context' : None,
        #        'prev_sao' : {},
        #        'formatter' : None,
        #        'request' : None,
        #        'arg' : {}
        #    }

        user_convo = self.get_user_convo(user_id)
        es_dict = self.read_parse_dict(self.parse_dict)
        print("final es_dict:",es_dict)
        print("user convo:",user_convo)

        try:
            if user_convo['request']:
                es_action = user_convo['prev_sao']['action'].split(':')[0]
                es_subject = user_convo['prev_sao']['subject'].split(':')[0]
                es_object = es_dict['subject'].split(':')[0]
            else:
                es_action = es_dict['action'].split(':')[0] if es_dict['action'] else 'do'
                es_object = es_dict['object'].split(':')[0] if es_dict['object'] else None
                if type(es_dict['subject']) == list:
                    es_subject = "something()"
                    subjects = [ value[0] for value in map(lambda x: x.split(':'), es_dict['subject']) ]
                else:
                    es_subject = es_dict['subject'].split(':')[0] + '()' if es_dict['subject'] else 'entity()'
                    subjects = None

            if re.match("^([0-9]+)d\(\)$", es_subject):
                es_subject = "time()"
               
            print("es_subject, es_object, es_action:",es_subject, es_object, es_action)
            send_params = {
                'user_convo':user_convo,
                'subjects':subjects
            }
            domain, answer, *params = getattr(eval(es_subject), es_action)(es_object, **send_params)
            print("Return values: {0}, {1}, {2}".format(domain, answer, params))
        except NameError:
            es_subject = es_dict['subject'].split(':')[0]
            cls = self.entities[self.entities['meanings'] == es_subject]['type'].tolist().pop()
            domain, answer, *params = getattr(eval('cls_' + cls), es_action)(es_object, user_convo=user_convo, subject=es_subject)
            print("Call subject class: {0}, {1}, {2}".format(domain, answer, params))

        domain = self.config['soa_info']['message'][domain] if domain in self.config['soa_info']['message'].keys() else domain

        request = None
        if answer.split(' ')[0] == "required":
            request = " ".join(answer.split(' ')[1:])

        print("params:",params)
        param = params[0] if len(params) > 0 else {}
        user_convo = {
            'context' : domain,
            'prev_sao' : {'subject':es_subject.replace("()",""), 'action':es_action, 'object':es_object},
            'formatter' : domain + ' ' + answer,
            'request' : request,
            'args' : param
        }

        return domain, answer, user_convo

    def make_formatter(self, domain, context, check_dict):
        validation_value = ''
        for result in check_dict['results']:
            condition, value = list(iter(result.items()))[0]
            if value == False:
                validation_value = self.config['validation_formatter'][condition]
                break

        if validation_value != '':
            formatter = ' '.join([domain, validation_value]) 
        else:
            formatter = ' '.join([domain, context]) 

        print("formatter:",formatter)
        return formatter

    def check_domain(self, domain, context, user_id):
        results = []
        if domain != '':
            for condition in self.config['context'][domain]['conditions']:
                results.append({condition:getattr(self, condition)(domain, context)})
        check_dict = {
            'results' : results
        }
        return check_dict

    def exists_order(self, context, sub_context):
        return True

    def before_delivery(self, context, sub_context):
        return True
